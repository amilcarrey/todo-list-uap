import {
  Component,
  FirebaseError,
  LogLevel,
  Logger,
  SDK_VERSION,
  _getProvider,
  _registerComponent,
  _removeServiceInstance,
  createMockUserToken,
  getApp,
  getModularInstance,
  registerVersion
} from "./chunk-L22QG3OI.js";
import "./chunk-5CYG367S.js";

// node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js
var l = class {
  constructor(t) {
    this.uid = t;
  }
  isAuthenticated() {
    return this.uid != null;
  }
  toKey() {
    return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
  }
  isEqual(t) {
    return t.uid === this.uid;
  }
};
l.UNAUTHENTICATED = new l(null), l.GOOGLE_CREDENTIALS = new l("google-credentials-uid"), l.FIRST_PARTY = new l("first-party-uid"), l.MOCK_USER = new l("mock-user");
var f = "9.6.10";
var d = new Logger("@firebase/firestore");
function w(t) {
  d.setLogLevel(t);
}
function m(t, ...e) {
  if (d.logLevel <= LogLevel.DEBUG) {
    const n = e.map(_);
    d.debug(`Firestore (${f}): ${t}`, ...n);
  }
}
function p(t, ...e) {
  if (d.logLevel <= LogLevel.ERROR) {
    const n = e.map(_);
    d.error(`Firestore (${f}): ${t}`, ...n);
  }
}
function y(t, ...e) {
  if (d.logLevel <= LogLevel.WARN) {
    const n = e.map(_);
    d.warn(`Firestore (${f}): ${t}`, ...n);
  }
}
function _(t) {
  if (typeof t == "string")
    return t;
  try {
    return e = t, JSON.stringify(e);
  } catch (e2) {
    return t;
  }
  var e;
}
function g(t = "Unexpected state") {
  const e = `FIRESTORE (${f}) INTERNAL ASSERTION FAILED: ` + t;
  throw p(e), new Error(e);
}
function v(t, e) {
  t || g();
}
function b(t, e) {
  return t;
}
var E = "ok";
var T = "cancelled";
var I = "unknown";
var A = "invalid-argument";
var R = "deadline-exceeded";
var P = "not-found";
var V = "already-exists";
var D = "permission-denied";
var N = "unauthenticated";
var $ = "resource-exhausted";
var S = "failed-precondition";
var F = "aborted";
var x = "out-of-range";
var q = "unimplemented";
var O = "internal";
var C = "unavailable";
var L = "data-loss";
var U = class extends FirebaseError {
  constructor(t, e) {
    super(t, e), this.code = t, this.message = e, this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
  }
};
var k = class {
  constructor() {
    this.promise = new Promise((t, e) => {
      this.resolve = t, this.reject = e;
    });
  }
};
var j = class {
  constructor(t, e) {
    this.user = e, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${t}`);
  }
};
var M = class {
  getToken() {
    return Promise.resolve(null);
  }
  invalidateToken() {
  }
  start(t, e) {
    t.enqueueRetryable(() => e(l.UNAUTHENTICATED));
  }
  shutdown() {
  }
};
var B = class {
  constructor(t) {
    this.token = t, this.changeListener = null;
  }
  getToken() {
    return Promise.resolve(this.token);
  }
  invalidateToken() {
  }
  start(t, e) {
    this.changeListener = e, t.enqueueRetryable(() => e(this.token.user));
  }
  shutdown() {
    this.changeListener = null;
  }
};
var z = class {
  constructor(t) {
    this.auth = null, t.onInit((t2) => {
      this.auth = t2;
    });
  }
  getToken() {
    return this.auth ? this.auth.getToken().then((t) => t ? (v(typeof t.accessToken == "string"), new j(t.accessToken, new l(this.auth.getUid()))) : null) : Promise.resolve(null);
  }
  invalidateToken() {
  }
  start(t, e) {
  }
  shutdown() {
  }
};
var G = class {
  constructor(t, e, n) {
    this.type = "FirstParty", this.user = l.FIRST_PARTY, this.headers = /* @__PURE__ */ new Map(), this.headers.set("X-Goog-AuthUser", e);
    const r = t.auth.getAuthHeaderValueForFirstParty([]);
    r && this.headers.set("Authorization", r), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
  }
};
var Q = class {
  constructor(t, e, n) {
    this.t = t, this.i = e, this.o = n;
  }
  getToken() {
    return Promise.resolve(new G(this.t, this.i, this.o));
  }
  start(t, e) {
    t.enqueueRetryable(() => e(l.FIRST_PARTY));
  }
  shutdown() {
  }
  invalidateToken() {
  }
};
var W = class {
  constructor(t) {
    this.value = t, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
  }
};
var Y = class {
  constructor(t) {
    this.u = t, this.appCheck = null, t.onInit((t2) => {
      this.appCheck = t2;
    });
  }
  getToken() {
    return this.appCheck ? this.appCheck.getToken().then((t) => t ? (v(typeof t.token == "string"), new W(t.token)) : null) : Promise.resolve(null);
  }
  invalidateToken() {
  }
  start(t, e) {
  }
  shutdown() {
  }
};
var H = class {
  constructor(t, e, n, r, s, i, o, u) {
    this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;
  }
};
var K = class {
  constructor(t, e) {
    this.projectId = t, this.database = e || "(default)";
  }
  static empty() {
    return new K("", "");
  }
  get isDefaultDatabase() {
    return this.database === "(default)";
  }
  isEqual(t) {
    return t instanceof K && t.projectId === this.projectId && t.database === this.database;
  }
};
var J = class {
  constructor(t, e, n) {
    e === void 0 ? e = 0 : e > t.length && g(), n === void 0 ? n = t.length - e : n > t.length - e && g(), this.segments = t, this.offset = e, this.len = n;
  }
  get length() {
    return this.len;
  }
  isEqual(t) {
    return J.comparator(this, t) === 0;
  }
  child(t) {
    const e = this.segments.slice(this.offset, this.limit());
    return t instanceof J ? t.forEach((t2) => {
      e.push(t2);
    }) : e.push(t), this.construct(e);
  }
  limit() {
    return this.offset + this.length;
  }
  popFirst(t) {
    return t = t === void 0 ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
  }
  popLast() {
    return this.construct(this.segments, this.offset, this.length - 1);
  }
  firstSegment() {
    return this.segments[this.offset];
  }
  lastSegment() {
    return this.get(this.length - 1);
  }
  get(t) {
    return this.segments[this.offset + t];
  }
  isEmpty() {
    return this.length === 0;
  }
  isPrefixOf(t) {
    if (t.length < this.length)
      return false;
    for (let e = 0; e < this.length; e++)
      if (this.get(e) !== t.get(e))
        return false;
    return true;
  }
  isImmediateParentOf(t) {
    if (this.length + 1 !== t.length)
      return false;
    for (let e = 0; e < this.length; e++)
      if (this.get(e) !== t.get(e))
        return false;
    return true;
  }
  forEach(t) {
    for (let e = this.offset, n = this.limit(); e < n; e++)
      t(this.segments[e]);
  }
  toArray() {
    return this.segments.slice(this.offset, this.limit());
  }
  static comparator(t, e) {
    const n = Math.min(t.length, e.length);
    for (let r = 0; r < n; r++) {
      const n2 = t.get(r), s = e.get(r);
      if (n2 < s)
        return -1;
      if (n2 > s)
        return 1;
    }
    return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
  }
};
var X = class extends J {
  construct(t, e, n) {
    return new X(t, e, n);
  }
  canonicalString() {
    return this.toArray().join("/");
  }
  toString() {
    return this.canonicalString();
  }
  static fromString(...t) {
    const e = [];
    for (const n of t) {
      if (n.indexOf("//") >= 0)
        throw new U(A, `Invalid segment (${n}). Paths must not contain // in them.`);
      e.push(...n.split("/").filter((t2) => t2.length > 0));
    }
    return new X(e);
  }
  static emptyPath() {
    return new X([]);
  }
};
var Z = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
var tt = class extends J {
  construct(t, e, n) {
    return new tt(t, e, n);
  }
  static isValidIdentifier(t) {
    return Z.test(t);
  }
  canonicalString() {
    return this.toArray().map((t) => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), tt.isValidIdentifier(t) || (t = "`" + t + "`"), t)).join(".");
  }
  toString() {
    return this.canonicalString();
  }
  isKeyField() {
    return this.length === 1 && this.get(0) === "__name__";
  }
  static keyField() {
    return new tt(["__name__"]);
  }
  static fromServerFormat(t) {
    const e = [];
    let n = "", r = 0;
    const s = () => {
      if (n.length === 0)
        throw new U(A, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
      e.push(n), n = "";
    };
    let i = false;
    for (; r < t.length; ) {
      const e2 = t[r];
      if (e2 === "\\") {
        if (r + 1 === t.length)
          throw new U(A, "Path has trailing escape character: " + t);
        const e3 = t[r + 1];
        if (e3 !== "\\" && e3 !== "." && e3 !== "`")
          throw new U(A, "Path has invalid escape sequence: " + t);
        n += e3, r += 2;
      } else
        e2 === "`" ? (i = !i, r++) : e2 !== "." || i ? (n += e2, r++) : (s(), r++);
    }
    if (s(), i)
      throw new U(A, "Unterminated ` in path: " + t);
    return new tt(e);
  }
  static emptyPath() {
    return new tt([]);
  }
};
var et = class {
  constructor(t) {
    this.path = t;
  }
  static fromPath(t) {
    return new et(X.fromString(t));
  }
  static fromName(t) {
    return new et(X.fromString(t).popFirst(5));
  }
  static empty() {
    return new et(X.emptyPath());
  }
  get collectionGroup() {
    return this.path.popLast().lastSegment();
  }
  hasCollectionId(t) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
  }
  getCollectionGroup() {
    return this.path.get(this.path.length - 2);
  }
  getCollectionPath() {
    return this.path.popLast();
  }
  isEqual(t) {
    return t !== null && X.comparator(this.path, t.path) === 0;
  }
  toString() {
    return this.path.toString();
  }
  static comparator(t, e) {
    return X.comparator(t.path, e.path);
  }
  static isDocumentKey(t) {
    return t.length % 2 == 0;
  }
  static fromSegments(t) {
    return new et(new X(t.slice()));
  }
};
function nt(t, e, n) {
  if (!n)
    throw new U(A, `Function ${t}() cannot be called with an empty ${e}.`);
}
function rt(t) {
  if (!et.isDocumentKey(t))
    throw new U(A, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
}
function st(t) {
  if (et.isDocumentKey(t))
    throw new U(A, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
}
function it(t) {
  if (t === void 0)
    return "undefined";
  if (t === null)
    return "null";
  if (typeof t == "string")
    return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);
  if (typeof t == "number" || typeof t == "boolean")
    return "" + t;
  if (typeof t == "object") {
    if (t instanceof Array)
      return "an array";
    {
      const e = function(t2) {
        if (t2.constructor)
          return t2.constructor.name;
        return null;
      }(t);
      return e ? `a custom ${e} object` : "an object";
    }
  }
  return typeof t == "function" ? "a function" : g();
}
function ot(t, e) {
  if ("_delegate" in t && (t = t._delegate), !(t instanceof e)) {
    if (e.name === t.constructor.name)
      throw new U(A, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      const n = it(t);
      throw new U(A, `Expected type '${e.name}', but it was: ${n}`);
    }
  }
  return t;
}
function ut(t, e) {
  if (e <= 0)
    throw new U(A, `Function ${t}() requires a positive number, but it was: ${e}.`);
}
function ct(t) {
  return t == null;
}
function at(t) {
  return t === 0 && 1 / t == -1 / 0;
}
var ht = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
};
var lt;
var ft;
function dt(t) {
  if (t === void 0)
    return p("RPC_ERROR", "HTTP error has no status"), I;
  switch (t) {
    case 200:
      return E;
    case 400:
      return S;
    case 401:
      return N;
    case 403:
      return D;
    case 404:
      return P;
    case 409:
      return F;
    case 416:
      return x;
    case 429:
      return $;
    case 499:
      return T;
    case 500:
      return I;
    case 501:
      return q;
    case 503:
      return C;
    case 504:
      return R;
    default:
      return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? O : I;
  }
}
(ft = lt || (lt = {}))[ft.OK = 0] = "OK", ft[ft.CANCELLED = 1] = "CANCELLED", ft[ft.UNKNOWN = 2] = "UNKNOWN", ft[ft.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", ft[ft.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ft[ft.NOT_FOUND = 5] = "NOT_FOUND", ft[ft.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ft[ft.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", ft[ft.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ft[ft.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", ft[ft.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ft[ft.ABORTED = 10] = "ABORTED", ft[ft.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ft[ft.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", ft[ft.INTERNAL = 13] = "INTERNAL", ft[ft.UNAVAILABLE = 14] = "UNAVAILABLE", ft[ft.DATA_LOSS = 15] = "DATA_LOSS";
var wt = class extends class {
  constructor(t) {
    this.databaseInfo = t, this.databaseId = t.databaseId;
    const e = t.ssl ? "https" : "http";
    this.h = e + "://" + t.host, this.l = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
  }
  m(t, e, n, r, s) {
    const i = this.p(t, e);
    m("RestConnection", "Sending: ", i, n);
    const o = {};
    return this.g(o, r, s), this.v(t, i, o, n).then((t2) => (m("RestConnection", "Received: ", t2), t2), (e2) => {
      throw y("RestConnection", `${t} failed with error: `, e2, "url: ", i, "request:", n), e2;
    });
  }
  T(t, e, n, r, s) {
    return this.m(t, e, n, r, s);
  }
  g(t, e, n) {
    t["X-Goog-Api-Client"] = "gl-js/ fire/" + f, t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e && e.headers.forEach((e2, n2) => t[n2] = e2), n && n.headers.forEach((e2, n2) => t[n2] = e2);
  }
  p(t, e) {
    const n = ht[t];
    return `${this.h}/v1/${e}:${n}`;
  }
} {
  constructor(t, e) {
    super(t), this.I = e;
  }
  A(t, e) {
    throw new Error("Not supported by FetchConnection");
  }
  async v(t, e, n, r) {
    const s = JSON.stringify(r);
    let i;
    try {
      i = await this.I(e, {
        method: "POST",
        headers: n,
        body: s
      });
    } catch (t2) {
      throw new U(dt(t2.status), "Request failed with error: " + t2.statusText);
    }
    if (!i.ok)
      throw new U(dt(i.status), "Request failed with error: " + i.statusText);
    return i.json();
  }
};
function mt(t) {
  const e = typeof self != "undefined" && (self.crypto || self.msCrypto), n = new Uint8Array(t);
  if (e && typeof e.getRandomValues == "function")
    e.getRandomValues(n);
  else
    for (let e2 = 0; e2 < t; e2++)
      n[e2] = Math.floor(256 * Math.random());
  return n;
}
var pt = class {
  static R() {
    const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
    let n = "";
    for (; n.length < 20; ) {
      const r = mt(40);
      for (let s = 0; s < r.length; ++s)
        n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));
    }
    return n;
  }
};
function yt(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
function _t(t, e, n) {
  return t.length === e.length && t.every((t2, r) => n(t2, e[r]));
}
var gt = class {
  constructor(t, e) {
    if (this.seconds = t, this.nanoseconds = e, e < 0)
      throw new U(A, "Timestamp nanoseconds out of range: " + e);
    if (e >= 1e9)
      throw new U(A, "Timestamp nanoseconds out of range: " + e);
    if (t < -62135596800)
      throw new U(A, "Timestamp seconds out of range: " + t);
    if (t >= 253402300800)
      throw new U(A, "Timestamp seconds out of range: " + t);
  }
  static now() {
    return gt.fromMillis(Date.now());
  }
  static fromDate(t) {
    return gt.fromMillis(t.getTime());
  }
  static fromMillis(t) {
    const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
    return new gt(e, n);
  }
  toDate() {
    return new Date(this.toMillis());
  }
  toMillis() {
    return 1e3 * this.seconds + this.nanoseconds / 1e6;
  }
  _compareTo(t) {
    return this.seconds === t.seconds ? yt(this.nanoseconds, t.nanoseconds) : yt(this.seconds, t.seconds);
  }
  isEqual(t) {
    return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
  }
  toString() {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  }
  toJSON() {
    return {
      seconds: this.seconds,
      nanoseconds: this.nanoseconds
    };
  }
  valueOf() {
    const t = this.seconds - -62135596800;
    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
  }
};
var vt = class {
  constructor(t) {
    this.timestamp = t;
  }
  static fromTimestamp(t) {
    return new vt(t);
  }
  static min() {
    return new vt(new gt(0, 0));
  }
  static max() {
    return new vt(new gt(253402300799, 999999999));
  }
  compareTo(t) {
    return this.timestamp._compareTo(t.timestamp);
  }
  isEqual(t) {
    return this.timestamp.isEqual(t.timestamp);
  }
  toMicroseconds() {
    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
  }
  toString() {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  }
  toTimestamp() {
    return this.timestamp;
  }
};
function bt(t) {
  let e = 0;
  for (const n in t)
    Object.prototype.hasOwnProperty.call(t, n) && e++;
  return e;
}
function Et(t, e) {
  for (const n in t)
    Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
var Tt = class {
  constructor(t) {
    this.fields = t, t.sort(tt.comparator);
  }
  covers(t) {
    for (const e of this.fields)
      if (e.isPrefixOf(t))
        return true;
    return false;
  }
  isEqual(t) {
    return _t(this.fields, t.fields, (t2, e) => t2.isEqual(e));
  }
};
var It = class {
  constructor(t) {
    this.binaryString = t;
  }
  static fromBase64String(t) {
    const e = atob(t);
    return new It(e);
  }
  static fromUint8Array(t) {
    const e = function(t2) {
      let e2 = "";
      for (let n = 0; n < t2.length; ++n)
        e2 += String.fromCharCode(t2[n]);
      return e2;
    }(t);
    return new It(e);
  }
  [Symbol.iterator]() {
    let t = 0;
    return {
      next: () => t < this.binaryString.length ? {
        value: this.binaryString.charCodeAt(t++),
        done: false
      } : {
        value: void 0,
        done: true
      }
    };
  }
  toBase64() {
    return t = this.binaryString, btoa(t);
    var t;
  }
  toUint8Array() {
    return function(t) {
      const e = new Uint8Array(t.length);
      for (let n = 0; n < t.length; n++)
        e[n] = t.charCodeAt(n);
      return e;
    }(this.binaryString);
  }
  approximateByteSize() {
    return 2 * this.binaryString.length;
  }
  compareTo(t) {
    return yt(this.binaryString, t.binaryString);
  }
  isEqual(t) {
    return this.binaryString === t.binaryString;
  }
};
It.EMPTY_BYTE_STRING = new It("");
var At = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function Rt(t) {
  if (v(!!t), typeof t == "string") {
    let e = 0;
    const n = At.exec(t);
    if (v(!!n), n[1]) {
      let t2 = n[1];
      t2 = (t2 + "000000000").substr(0, 9), e = Number(t2);
    }
    const r = new Date(t);
    return {
      seconds: Math.floor(r.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: Pt(t.seconds),
    nanos: Pt(t.nanos)
  };
}
function Pt(t) {
  return typeof t == "number" ? t : typeof t == "string" ? Number(t) : 0;
}
function Vt(t) {
  return typeof t == "string" ? It.fromBase64String(t) : It.fromUint8Array(t);
}
function Dt(t) {
  var e, n;
  return ((n = (((e = t == null ? void 0 : t.mapValue) === null || e === void 0 ? void 0 : e.fields) || {}).__type__) === null || n === void 0 ? void 0 : n.stringValue) === "server_timestamp";
}
function Nt(t) {
  const e = t.mapValue.fields.__previous_value__;
  return Dt(e) ? Nt(e) : e;
}
function $t(t) {
  const e = Rt(t.mapValue.fields.__local_write_time__.timestampValue);
  return new gt(e.seconds, e.nanos);
}
function St(t) {
  return "nullValue" in t ? 0 : "booleanValue" in t ? 1 : "integerValue" in t || "doubleValue" in t ? 2 : "timestampValue" in t ? 3 : "stringValue" in t ? 5 : "bytesValue" in t ? 6 : "referenceValue" in t ? 7 : "geoPointValue" in t ? 8 : "arrayValue" in t ? 9 : "mapValue" in t ? Dt(t) ? 4 : function(t2) {
    return (((t2.mapValue || {}).fields || {}).__type__ || {}).stringValue === "__max__";
  }(t) ? 9 : 10 : g();
}
function Ft(t, e) {
  if (t === e)
    return true;
  const n = St(t);
  if (n !== St(e))
    return false;
  switch (n) {
    case 0:
    case 9007199254740991:
      return true;
    case 1:
      return t.booleanValue === e.booleanValue;
    case 4:
      return $t(t).isEqual($t(e));
    case 3:
      return function(t2, e2) {
        if (typeof t2.timestampValue == "string" && typeof e2.timestampValue == "string" && t2.timestampValue.length === e2.timestampValue.length)
          return t2.timestampValue === e2.timestampValue;
        const n2 = Rt(t2.timestampValue), r = Rt(e2.timestampValue);
        return n2.seconds === r.seconds && n2.nanos === r.nanos;
      }(t, e);
    case 5:
      return t.stringValue === e.stringValue;
    case 6:
      return function(t2, e2) {
        return Vt(t2.bytesValue).isEqual(Vt(e2.bytesValue));
      }(t, e);
    case 7:
      return t.referenceValue === e.referenceValue;
    case 8:
      return function(t2, e2) {
        return Pt(t2.geoPointValue.latitude) === Pt(e2.geoPointValue.latitude) && Pt(t2.geoPointValue.longitude) === Pt(e2.geoPointValue.longitude);
      }(t, e);
    case 2:
      return function(t2, e2) {
        if ("integerValue" in t2 && "integerValue" in e2)
          return Pt(t2.integerValue) === Pt(e2.integerValue);
        if ("doubleValue" in t2 && "doubleValue" in e2) {
          const n2 = Pt(t2.doubleValue), r = Pt(e2.doubleValue);
          return n2 === r ? at(n2) === at(r) : isNaN(n2) && isNaN(r);
        }
        return false;
      }(t, e);
    case 9:
      return _t(t.arrayValue.values || [], e.arrayValue.values || [], Ft);
    case 10:
      return function(t2, e2) {
        const n2 = t2.mapValue.fields || {}, r = e2.mapValue.fields || {};
        if (bt(n2) !== bt(r))
          return false;
        for (const t3 in n2)
          if (n2.hasOwnProperty(t3) && (r[t3] === void 0 || !Ft(n2[t3], r[t3])))
            return false;
        return true;
      }(t, e);
    default:
      return g();
  }
}
function xt(t, e) {
  return (t.values || []).find((t2) => Ft(t2, e)) !== void 0;
}
function qt(t, e) {
  if (t === e)
    return 0;
  const n = St(t), r = St(e);
  if (n !== r)
    return yt(n, r);
  switch (n) {
    case 0:
    case 9007199254740991:
      return 0;
    case 1:
      return yt(t.booleanValue, e.booleanValue);
    case 2:
      return function(t2, e2) {
        const n2 = Pt(t2.integerValue || t2.doubleValue), r2 = Pt(e2.integerValue || e2.doubleValue);
        return n2 < r2 ? -1 : n2 > r2 ? 1 : n2 === r2 ? 0 : isNaN(n2) ? isNaN(r2) ? 0 : -1 : 1;
      }(t, e);
    case 3:
      return Ot(t.timestampValue, e.timestampValue);
    case 4:
      return Ot($t(t), $t(e));
    case 5:
      return yt(t.stringValue, e.stringValue);
    case 6:
      return function(t2, e2) {
        const n2 = Vt(t2), r2 = Vt(e2);
        return n2.compareTo(r2);
      }(t.bytesValue, e.bytesValue);
    case 7:
      return function(t2, e2) {
        const n2 = t2.split("/"), r2 = e2.split("/");
        for (let t3 = 0; t3 < n2.length && t3 < r2.length; t3++) {
          const e3 = yt(n2[t3], r2[t3]);
          if (e3 !== 0)
            return e3;
        }
        return yt(n2.length, r2.length);
      }(t.referenceValue, e.referenceValue);
    case 8:
      return function(t2, e2) {
        const n2 = yt(Pt(t2.latitude), Pt(e2.latitude));
        if (n2 !== 0)
          return n2;
        return yt(Pt(t2.longitude), Pt(e2.longitude));
      }(t.geoPointValue, e.geoPointValue);
    case 9:
      return function(t2, e2) {
        const n2 = t2.values || [], r2 = e2.values || [];
        for (let t3 = 0; t3 < n2.length && t3 < r2.length; ++t3) {
          const e3 = qt(n2[t3], r2[t3]);
          if (e3)
            return e3;
        }
        return yt(n2.length, r2.length);
      }(t.arrayValue, e.arrayValue);
    case 10:
      return function(t2, e2) {
        const n2 = t2.fields || {}, r2 = Object.keys(n2), s = e2.fields || {}, i = Object.keys(s);
        r2.sort(), i.sort();
        for (let t3 = 0; t3 < r2.length && t3 < i.length; ++t3) {
          const e3 = yt(r2[t3], i[t3]);
          if (e3 !== 0)
            return e3;
          const o = qt(n2[r2[t3]], s[i[t3]]);
          if (o !== 0)
            return o;
        }
        return yt(r2.length, i.length);
      }(t.mapValue, e.mapValue);
    default:
      throw g();
  }
}
function Ot(t, e) {
  if (typeof t == "string" && typeof e == "string" && t.length === e.length)
    return yt(t, e);
  const n = Rt(t), r = Rt(e), s = yt(n.seconds, r.seconds);
  return s !== 0 ? s : yt(n.nanos, r.nanos);
}
function Ct(t, e) {
  return {
    referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
  };
}
function Lt(t) {
  return !!t && "arrayValue" in t;
}
function Ut(t) {
  return !!t && "nullValue" in t;
}
function kt(t) {
  return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
function jt(t) {
  return !!t && "mapValue" in t;
}
function Mt(t) {
  if (t.geoPointValue)
    return {
      geoPointValue: Object.assign({}, t.geoPointValue)
    };
  if (t.timestampValue && typeof t.timestampValue == "object")
    return {
      timestampValue: Object.assign({}, t.timestampValue)
    };
  if (t.mapValue) {
    const e = {
      mapValue: {
        fields: {}
      }
    };
    return Et(t.mapValue.fields, (t2, n) => e.mapValue.fields[t2] = Mt(n)), e;
  }
  if (t.arrayValue) {
    const e = {
      arrayValue: {
        values: []
      }
    };
    for (let n = 0; n < (t.arrayValue.values || []).length; ++n)
      e.arrayValue.values[n] = Mt(t.arrayValue.values[n]);
    return e;
  }
  return Object.assign({}, t);
}
var Bt = class {
  constructor(t) {
    this.value = t;
  }
  static empty() {
    return new Bt({
      mapValue: {}
    });
  }
  field(t) {
    if (t.isEmpty())
      return this.value;
    {
      let e = this.value;
      for (let n = 0; n < t.length - 1; ++n)
        if (e = (e.mapValue.fields || {})[t.get(n)], !jt(e))
          return null;
      return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
    }
  }
  set(t, e) {
    this.getFieldsMap(t.popLast())[t.lastSegment()] = Mt(e);
  }
  setAll(t) {
    let e = tt.emptyPath(), n = {}, r = [];
    t.forEach((t2, s2) => {
      if (!e.isImmediateParentOf(s2)) {
        const t3 = this.getFieldsMap(e);
        this.applyChanges(t3, n, r), n = {}, r = [], e = s2.popLast();
      }
      t2 ? n[s2.lastSegment()] = Mt(t2) : r.push(s2.lastSegment());
    });
    const s = this.getFieldsMap(e);
    this.applyChanges(s, n, r);
  }
  delete(t) {
    const e = this.field(t.popLast());
    jt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
  }
  isEqual(t) {
    return Ft(this.value, t.value);
  }
  getFieldsMap(t) {
    let e = this.value;
    e.mapValue.fields || (e.mapValue = {
      fields: {}
    });
    for (let n = 0; n < t.length; ++n) {
      let r = e.mapValue.fields[t.get(n)];
      jt(r) && r.mapValue.fields || (r = {
        mapValue: {
          fields: {}
        }
      }, e.mapValue.fields[t.get(n)] = r), e = r;
    }
    return e.mapValue.fields;
  }
  applyChanges(t, e, n) {
    Et(e, (e2, n2) => t[e2] = n2);
    for (const e2 of n)
      delete t[e2];
  }
  clone() {
    return new Bt(Mt(this.value));
  }
};
var zt = class {
  constructor(t, e, n, r, s, i) {
    this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.data = s, this.documentState = i;
  }
  static newInvalidDocument(t) {
    return new zt(t, 0, vt.min(), vt.min(), Bt.empty(), 0);
  }
  static newFoundDocument(t, e, n) {
    return new zt(t, 1, e, vt.min(), n, 0);
  }
  static newNoDocument(t, e) {
    return new zt(t, 2, e, vt.min(), Bt.empty(), 0);
  }
  static newUnknownDocument(t, e) {
    return new zt(t, 3, e, vt.min(), Bt.empty(), 2);
  }
  convertToFoundDocument(t, e) {
    return this.version = t, this.documentType = 1, this.data = e, this.documentState = 0, this;
  }
  convertToNoDocument(t) {
    return this.version = t, this.documentType = 2, this.data = Bt.empty(), this.documentState = 0, this;
  }
  convertToUnknownDocument(t) {
    return this.version = t, this.documentType = 3, this.data = Bt.empty(), this.documentState = 2, this;
  }
  setHasCommittedMutations() {
    return this.documentState = 2, this;
  }
  setHasLocalMutations() {
    return this.documentState = 1, this;
  }
  setReadTime(t) {
    return this.readTime = t, this;
  }
  get hasLocalMutations() {
    return this.documentState === 1;
  }
  get hasCommittedMutations() {
    return this.documentState === 2;
  }
  get hasPendingWrites() {
    return this.hasLocalMutations || this.hasCommittedMutations;
  }
  isValidDocument() {
    return this.documentType !== 0;
  }
  isFoundDocument() {
    return this.documentType === 1;
  }
  isNoDocument() {
    return this.documentType === 2;
  }
  isUnknownDocument() {
    return this.documentType === 3;
  }
  isEqual(t) {
    return t instanceof zt && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
  }
  mutableCopy() {
    return new zt(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);
  }
  toString() {
    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
  }
};
var Gt = class {
  constructor(t, e = null, n = [], r = [], s = null, i = null, o = null) {
    this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, this.startAt = i, this.endAt = o, this.P = null;
  }
};
function Qt(t, e = null, n = [], r = [], s = null, i = null, o = null) {
  return new Gt(t, e, n, r, s, i, o);
}
var Wt = class extends class {
} {
  constructor(t, e, n) {
    super(), this.field = t, this.op = e, this.value = n;
  }
  static create(t, e, n) {
    return t.isKeyField() ? e === "in" || e === "not-in" ? this.V(t, e, n) : new Yt(t, e, n) : e === "array-contains" ? new Xt(t, n) : e === "in" ? new Zt(t, n) : e === "not-in" ? new te(t, n) : e === "array-contains-any" ? new ee(t, n) : new Wt(t, e, n);
  }
  static V(t, e, n) {
    return e === "in" ? new Ht(t, n) : new Kt(t, n);
  }
  matches(t) {
    const e = t.data.field(this.field);
    return this.op === "!=" ? e !== null && this.D(qt(e, this.value)) : e !== null && St(this.value) === St(e) && this.D(qt(e, this.value));
  }
  D(t) {
    switch (this.op) {
      case "<":
        return t < 0;
      case "<=":
        return t <= 0;
      case "==":
        return t === 0;
      case "!=":
        return t !== 0;
      case ">":
        return t > 0;
      case ">=":
        return t >= 0;
      default:
        return g();
    }
  }
  N() {
    return ["<", "<=", ">", ">=", "!=", "not-in"].indexOf(this.op) >= 0;
  }
};
var Yt = class extends Wt {
  constructor(t, e, n) {
    super(t, e, n), this.key = et.fromName(n.referenceValue);
  }
  matches(t) {
    const e = et.comparator(t.key, this.key);
    return this.D(e);
  }
};
var Ht = class extends Wt {
  constructor(t, e) {
    super(t, "in", e), this.keys = Jt("in", e);
  }
  matches(t) {
    return this.keys.some((e) => e.isEqual(t.key));
  }
};
var Kt = class extends Wt {
  constructor(t, e) {
    super(t, "not-in", e), this.keys = Jt("not-in", e);
  }
  matches(t) {
    return !this.keys.some((e) => e.isEqual(t.key));
  }
};
function Jt(t, e) {
  var n;
  return (((n = e.arrayValue) === null || n === void 0 ? void 0 : n.values) || []).map((t2) => et.fromName(t2.referenceValue));
}
var Xt = class extends Wt {
  constructor(t, e) {
    super(t, "array-contains", e);
  }
  matches(t) {
    const e = t.data.field(this.field);
    return Lt(e) && xt(e.arrayValue, this.value);
  }
};
var Zt = class extends Wt {
  constructor(t, e) {
    super(t, "in", e);
  }
  matches(t) {
    const e = t.data.field(this.field);
    return e !== null && xt(this.value.arrayValue, e);
  }
};
var te = class extends Wt {
  constructor(t, e) {
    super(t, "not-in", e);
  }
  matches(t) {
    if (xt(this.value.arrayValue, {
      nullValue: "NULL_VALUE"
    }))
      return false;
    const e = t.data.field(this.field);
    return e !== null && !xt(this.value.arrayValue, e);
  }
};
var ee = class extends Wt {
  constructor(t, e) {
    super(t, "array-contains-any", e);
  }
  matches(t) {
    const e = t.data.field(this.field);
    return !(!Lt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t2) => xt(this.value.arrayValue, t2));
  }
};
var ne = class {
  constructor(t, e) {
    this.position = t, this.inclusive = e;
  }
};
var re = class {
  constructor(t, e = "asc") {
    this.field = t, this.dir = e;
  }
};
function se(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}
function ie(t, e) {
  if (t === null)
    return e === null;
  if (e === null)
    return false;
  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length)
    return false;
  for (let n = 0; n < t.position.length; n++) {
    if (!Ft(t.position[n], e.position[n]))
      return false;
  }
  return true;
}
var oe = class {
  constructor(t, e = null, n = [], r = [], s = null, i = "F", o = null, u = null) {
    this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.$ = null, this.S = null, this.startAt, this.endAt;
  }
};
function ue(t) {
  return !ct(t.limit) && t.limitType === "L";
}
function ce(t) {
  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}
function ae(t) {
  for (const e of t.filters)
    if (e.N())
      return e.field;
  return null;
}
function he(t) {
  return t.collectionGroup !== null;
}
function le(t) {
  const e = b(t);
  if (e.$ === null) {
    e.$ = [];
    const t2 = ae(e), n = ce(e);
    if (t2 !== null && n === null)
      t2.isKeyField() || e.$.push(new re(t2)), e.$.push(new re(tt.keyField(), "asc"));
    else {
      let t3 = false;
      for (const n2 of e.explicitOrderBy)
        e.$.push(n2), n2.field.isKeyField() && (t3 = true);
      if (!t3) {
        const t4 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
        e.$.push(new re(tt.keyField(), t4));
      }
    }
  }
  return e.$;
}
function fe(t) {
  const e = b(t);
  if (!e.S)
    if (e.limitType === "F")
      e.S = Qt(e.path, e.collectionGroup, le(e), e.filters, e.limit, e.startAt, e.endAt);
    else {
      const t2 = [];
      for (const n2 of le(e)) {
        const e2 = n2.dir === "desc" ? "asc" : "desc";
        t2.push(new re(n2.field, e2));
      }
      const n = e.endAt ? new ne(e.endAt.position, !e.endAt.inclusive) : null, r = e.startAt ? new ne(e.startAt.position, !e.startAt.inclusive) : null;
      e.S = Qt(e.path, e.collectionGroup, t2, e.filters, e.limit, n, r);
    }
  return e.S;
}
function de(t, e) {
  return function(t2, e2) {
    if (t2.limit !== e2.limit)
      return false;
    if (t2.orderBy.length !== e2.orderBy.length)
      return false;
    for (let n2 = 0; n2 < t2.orderBy.length; n2++)
      if (!se(t2.orderBy[n2], e2.orderBy[n2]))
        return false;
    if (t2.filters.length !== e2.filters.length)
      return false;
    for (let s = 0; s < t2.filters.length; s++)
      if (n = t2.filters[s], r = e2.filters[s], n.op !== r.op || !n.field.isEqual(r.field) || !Ft(n.value, r.value))
        return false;
    var n, r;
    return t2.collectionGroup === e2.collectionGroup && !!t2.path.isEqual(e2.path) && !!ie(t2.startAt, e2.startAt) && ie(t2.endAt, e2.endAt);
  }(fe(t), fe(e)) && t.limitType === e.limitType;
}
function we(t, e) {
  return function(t2) {
    return typeof t2 == "number" && Number.isInteger(t2) && !at(t2) && t2 <= Number.MAX_SAFE_INTEGER && t2 >= Number.MIN_SAFE_INTEGER;
  }(e) ? function(t2) {
    return {
      integerValue: "" + t2
    };
  }(e) : function(t2, e2) {
    if (t2.F) {
      if (isNaN(e2))
        return {
          doubleValue: "NaN"
        };
      if (e2 === 1 / 0)
        return {
          doubleValue: "Infinity"
        };
      if (e2 === -1 / 0)
        return {
          doubleValue: "-Infinity"
        };
    }
    return {
      doubleValue: at(e2) ? "-0" : e2
    };
  }(t, e);
}
var me = class {
  constructor() {
    this._ = void 0;
  }
};
var pe = class extends me {
};
var ye = class extends me {
  constructor(t) {
    super(), this.elements = t;
  }
};
var _e = class extends me {
  constructor(t) {
    super(), this.elements = t;
  }
};
var ge = class extends me {
  constructor(t, e) {
    super(), this.q = t, this.O = e;
  }
};
var ve = class {
  constructor(t, e) {
    this.field = t, this.transform = e;
  }
};
var be = class {
  constructor(t, e) {
    this.updateTime = t, this.exists = e;
  }
  static none() {
    return new be();
  }
  static exists(t) {
    return new be(void 0, t);
  }
  static updateTime(t) {
    return new be(t);
  }
  get isNone() {
    return this.updateTime === void 0 && this.exists === void 0;
  }
  isEqual(t) {
    return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
  }
};
var Ee = class {
};
var Te = class extends Ee {
  constructor(t, e, n, r = []) {
    super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, this.type = 0;
  }
};
var Ie = class extends Ee {
  constructor(t, e, n, r, s = []) {
    super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, this.fieldTransforms = s, this.type = 1;
  }
};
var Ae = class extends Ee {
  constructor(t, e) {
    super(), this.key = t, this.precondition = e, this.type = 2, this.fieldTransforms = [];
  }
};
var Re = class extends Ee {
  constructor(t, e) {
    super(), this.key = t, this.precondition = e, this.type = 3, this.fieldTransforms = [];
  }
};
var Pe = (() => {
  const t = {
    asc: "ASCENDING",
    desc: "DESCENDING"
  };
  return t;
})();
var Ve = (() => {
  const t = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    in: "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
  };
  return t;
})();
var De = class {
  constructor(t, e) {
    this.databaseId = t, this.F = e;
  }
};
function Ne(t, e) {
  if (t.F) {
    return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
  }
  return {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
function $e(t, e) {
  return t.F ? e.toBase64() : e.toUint8Array();
}
function Se(t, e) {
  return Ne(t, e.toTimestamp());
}
function Fe(t) {
  return v(!!t), vt.fromTimestamp(function(t2) {
    const e = Rt(t2);
    return new gt(e.seconds, e.nanos);
  }(t));
}
function xe(t, e) {
  return function(t2) {
    return new X(["projects", t2.projectId, "databases", t2.database]);
  }(t).child("documents").child(e).canonicalString();
}
function qe(t, e) {
  return xe(t.databaseId, e.path);
}
function Oe(t, e) {
  const n = function(t2) {
    const e2 = X.fromString(t2);
    return v(We(e2)), e2;
  }(e);
  if (n.get(1) !== t.databaseId.projectId)
    throw new U(A, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
  if (n.get(3) !== t.databaseId.database)
    throw new U(A, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
  return new et((v((r = n).length > 4 && r.get(4) === "documents"), r.popFirst(5)));
  var r;
}
function Ce(t, e) {
  return xe(t.databaseId, e);
}
function Le(t) {
  return new X(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
}
function Ue(t, e, n) {
  return {
    name: qe(t, e),
    fields: n.value.mapValue.fields
  };
}
function ke(t, e) {
  return "found" in e ? function(t2, e2) {
    v(!!e2.found), e2.found.name, e2.found.updateTime;
    const n = Oe(t2, e2.found.name), r = Fe(e2.found.updateTime), s = new Bt({
      mapValue: {
        fields: e2.found.fields
      }
    });
    return zt.newFoundDocument(n, r, s);
  }(t, e) : "missing" in e ? function(t2, e2) {
    v(!!e2.missing), v(!!e2.readTime);
    const n = Oe(t2, e2.missing), r = Fe(e2.readTime);
    return zt.newNoDocument(n, r);
  }(t, e) : g();
}
function je(t, e) {
  let n;
  if (e instanceof Te)
    n = {
      update: Ue(t, e.key, e.value)
    };
  else if (e instanceof Ae)
    n = {
      delete: qe(t, e.key)
    };
  else if (e instanceof Ie)
    n = {
      update: Ue(t, e.key, e.data),
      updateMask: Qe(e.fieldMask)
    };
  else {
    if (!(e instanceof Re))
      return g();
    n = {
      verify: qe(t, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t2) => function(t3, e2) {
    const n2 = e2.transform;
    if (n2 instanceof pe)
      return {
        fieldPath: e2.field.canonicalString(),
        setToServerValue: "REQUEST_TIME"
      };
    if (n2 instanceof ye)
      return {
        fieldPath: e2.field.canonicalString(),
        appendMissingElements: {
          values: n2.elements
        }
      };
    if (n2 instanceof _e)
      return {
        fieldPath: e2.field.canonicalString(),
        removeAllFromArray: {
          values: n2.elements
        }
      };
    if (n2 instanceof ge)
      return {
        fieldPath: e2.field.canonicalString(),
        increment: n2.O
      };
    throw g();
  }(0, t2))), e.precondition.isNone || (n.currentDocument = function(t2, e2) {
    return e2.updateTime !== void 0 ? {
      updateTime: Se(t2, e2.updateTime)
    } : e2.exists !== void 0 ? {
      exists: e2.exists
    } : g();
  }(t, e.precondition)), n;
}
function Me(t, e) {
  const n = {
    structuredQuery: {}
  }, r = e.path;
  e.collectionGroup !== null ? (n.parent = Ce(t, r), n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: true
  }]) : (n.parent = Ce(t, r.popLast()), n.structuredQuery.from = [{
    collectionId: r.lastSegment()
  }]);
  const s = function(t2) {
    if (t2.length === 0)
      return;
    const e2 = t2.map((t3) => function(t4) {
      if (t4.op === "==") {
        if (kt(t4.value))
          return {
            unaryFilter: {
              field: Ge(t4.field),
              op: "IS_NAN"
            }
          };
        if (Ut(t4.value))
          return {
            unaryFilter: {
              field: Ge(t4.field),
              op: "IS_NULL"
            }
          };
      } else if (t4.op === "!=") {
        if (kt(t4.value))
          return {
            unaryFilter: {
              field: Ge(t4.field),
              op: "IS_NOT_NAN"
            }
          };
        if (Ut(t4.value))
          return {
            unaryFilter: {
              field: Ge(t4.field),
              op: "IS_NOT_NULL"
            }
          };
      }
      return {
        fieldFilter: {
          field: Ge(t4.field),
          op: ze(t4.op),
          value: t4.value
        }
      };
    }(t3));
    if (e2.length === 1)
      return e2[0];
    return {
      compositeFilter: {
        op: "AND",
        filters: e2
      }
    };
  }(e.filters);
  s && (n.structuredQuery.where = s);
  const i = function(t2) {
    if (t2.length === 0)
      return;
    return t2.map((t3) => function(t4) {
      return {
        field: Ge(t4.field),
        direction: Be(t4.dir)
      };
    }(t3));
  }(e.orderBy);
  i && (n.structuredQuery.orderBy = i);
  const o = function(t2, e2) {
    return t2.F || ct(e2) ? e2 : {
      value: e2
    };
  }(t, e.limit);
  var u;
  return o !== null && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {
    before: (u = e.startAt).inclusive,
    values: u.position
  }), e.endAt && (n.structuredQuery.endAt = function(t2) {
    return {
      before: !t2.inclusive,
      values: t2.position
    };
  }(e.endAt)), n;
}
function Be(t) {
  return Pe[t];
}
function ze(t) {
  return Ve[t];
}
function Ge(t) {
  return {
    fieldPath: t.canonicalString()
  };
}
function Qe(t) {
  const e = [];
  return t.fields.forEach((t2) => e.push(t2.canonicalString())), {
    fieldPaths: e
  };
}
function We(t) {
  return t.length >= 4 && t.get(0) === "projects" && t.get(2) === "databases";
}
function Ye(t) {
  return new De(t, true);
}
var He = class {
  constructor(t, e, n = 1e3, r = 1.5, s = 6e4) {
    this.C = t, this.timerId = e, this.L = n, this.U = r, this.k = s, this.j = 0, this.M = null, this.B = Date.now(), this.reset();
  }
  reset() {
    this.j = 0;
  }
  G() {
    this.j = this.k;
  }
  W(t) {
    this.cancel();
    const e = Math.floor(this.j + this.Y()), n = Math.max(0, Date.now() - this.B), r = Math.max(0, e - n);
    r > 0 && m("ExponentialBackoff", `Backing off for ${r} ms (base delay: ${this.j} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), this.M = this.C.enqueueAfterDelay(this.timerId, r, () => (this.B = Date.now(), t())), this.j *= this.U, this.j < this.L && (this.j = this.L), this.j > this.k && (this.j = this.k);
  }
  H() {
    this.M !== null && (this.M.skipDelay(), this.M = null);
  }
  cancel() {
    this.M !== null && (this.M.cancel(), this.M = null);
  }
  Y() {
    return (Math.random() - 0.5) * this.j;
  }
};
var Ke = class extends class {
} {
  constructor(t, e, n, r) {
    super(), this.authCredentials = t, this.appCheckCredentials = e, this.K = n, this.q = r, this.J = false;
  }
  X() {
    if (this.J)
      throw new U(S, "The client has already been terminated.");
  }
  m(t, e, n) {
    return this.X(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([r, s]) => this.K.m(t, e, n, r, s)).catch((t2) => {
      throw t2.name === "FirebaseError" ? (t2.code === N && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t2) : new U(I, t2.toString());
    });
  }
  T(t, e, n) {
    return this.X(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([r, s]) => this.K.T(t, e, n, r, s)).catch((t2) => {
      throw t2.name === "FirebaseError" ? (t2.code === N && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t2) : new U(I, t2.toString());
    });
  }
  terminate() {
    this.J = true;
  }
};
async function Je(t, e) {
  const n = b(t), r = Le(n.q) + "/documents", s = {
    writes: e.map((t2) => je(n.q, t2))
  };
  await n.m("Commit", r, s);
}
async function Xe(t, e) {
  const n = b(t), r = Le(n.q) + "/documents", s = {
    documents: e.map((t2) => qe(n.q, t2))
  }, i = await n.T("BatchGetDocuments", r, s), o = /* @__PURE__ */ new Map();
  i.forEach((t2) => {
    const e2 = ke(n.q, t2);
    o.set(e2.key.toString(), e2);
  });
  const u = [];
  return e.forEach((t2) => {
    const e2 = o.get(t2.toString());
    v(!!e2), u.push(e2);
  }), u;
}
async function Ze(t, e) {
  const n = b(t), r = Me(n.q, fe(e));
  return (await n.T("RunQuery", r.parent, {
    structuredQuery: r.structuredQuery
  })).filter((t2) => !!t2.document).map((t2) => function(t3, e2, n2) {
    const r2 = Oe(t3, e2.name), s = Fe(e2.updateTime), i = new Bt({
      mapValue: {
        fields: e2.fields
      }
    }), o = zt.newFoundDocument(r2, s, i);
    return n2 && o.setHasCommittedMutations(), n2 ? o.setHasCommittedMutations() : o;
  }(n.q, t2.document, void 0));
}
var tn = /* @__PURE__ */ new Map();
function en(t) {
  if (t._terminated)
    throw new U(S, "The client has already been terminated.");
  if (!tn.has(t)) {
    m("ComponentProvider", "Initializing Datastore");
    const i = function(t2) {
      return new wt(t2, fetch.bind(null));
    }((e = t._databaseId, n = t.app.options.appId || "", r = t._persistenceKey, s = t._freezeSettings(), new H(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))), o = Ye(t._databaseId), u = function(t2, e2, n2, r2) {
      return new Ke(t2, e2, n2, r2);
    }(t._authCredentials, t._appCheckCredentials, i, o);
    tn.set(t, u);
  }
  var e, n, r, s;
  return tn.get(t);
}
var nn = class {
  constructor(t) {
    var e;
    if (t.host === void 0) {
      if (t.ssl !== void 0)
        throw new U(A, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = true;
    } else
      this.host = t.host, this.ssl = (e = t.ssl) === null || e === void 0 || e;
    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, t.cacheSizeBytes === void 0)
      this.cacheSizeBytes = 41943040;
    else {
      if (t.cacheSizeBytes !== -1 && t.cacheSizeBytes < 1048576)
        throw new U(A, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = t.cacheSizeBytes;
    }
    this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, function(t2, e2, n, r) {
      if (e2 === true && r === true)
        throw new U(A, `${t2} and ${n} cannot be used together.`);
    }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
  }
  isEqual(t) {
    return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
  }
};
var rn = class {
  constructor(t, e, n) {
    this._authCredentials = e, this._appCheckCredentials = n, this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new nn({}), this._settingsFrozen = false, t instanceof K ? this._databaseId = t : (this._app = t, this._databaseId = function(t2) {
      if (!Object.prototype.hasOwnProperty.apply(t2.options, ["projectId"]))
        throw new U(A, '"projectId" not provided in firebase.initializeApp.');
      return new K(t2.options.projectId);
    }(t));
  }
  get app() {
    if (!this._app)
      throw new U(S, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
    return this._app;
  }
  get _initialized() {
    return this._settingsFrozen;
  }
  get _terminated() {
    return this._terminateTask !== void 0;
  }
  _setSettings(t) {
    if (this._settingsFrozen)
      throw new U(S, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    this._settings = new nn(t), t.credentials !== void 0 && (this._authCredentials = function(t2) {
      if (!t2)
        return new M();
      switch (t2.type) {
        case "gapi":
          const e = t2.client;
          return v(!(typeof e != "object" || e === null || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new Q(e, t2.sessionIndex || "0", t2.iamToken || null);
        case "provider":
          return t2.client;
        default:
          throw new U(A, "makeAuthCredentialsProvider failed due to invalid credential type");
      }
    }(t.credentials));
  }
  _getSettings() {
    return this._settings;
  }
  _freezeSettings() {
    return this._settingsFrozen = true, this._settings;
  }
  _delete() {
    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
  }
  toJSON() {
    return {
      app: this._app,
      databaseId: this._databaseId,
      settings: this._settings
    };
  }
  _terminate() {
    return function(t) {
      const e = tn.get(t);
      e && (m("ComponentProvider", "Removing Datastore"), tn.delete(t), e.terminate());
    }(this), Promise.resolve();
  }
};
function sn(t, e) {
  const n = _getProvider(t, "firestore/lite");
  if (n.isInitialized())
    throw new U(S, "Firestore can only be initialized once per app.");
  return n.initialize({
    options: e
  });
}
function on(e = getApp()) {
  return _getProvider(e, "firestore/lite").getImmediate();
}
function un(t, e, n, r = {}) {
  var s;
  const i = (t = ot(t, rn))._getSettings();
  if (i.host !== "firestore.googleapis.com" && i.host !== e && y("Host has been set in both settings() and useEmulator(), emulator host will be used"), t._setSettings(Object.assign(Object.assign({}, i), {
    host: `${e}:${n}`,
    ssl: false
  })), r.mockUserToken) {
    let e2, n2;
    if (typeof r.mockUserToken == "string")
      e2 = r.mockUserToken, n2 = l.MOCK_USER;
    else {
      e2 = createMockUserToken(r.mockUserToken, (s = t._app) === null || s === void 0 ? void 0 : s.options.projectId);
      const i2 = r.mockUserToken.sub || r.mockUserToken.user_id;
      if (!i2)
        throw new U(A, "mockUserToken must contain 'sub' or 'user_id' field!");
      n2 = new l(i2);
    }
    t._authCredentials = new B(new j(e2, n2));
  }
}
function cn(t) {
  return t = ot(t, rn), _removeServiceInstance(t.app, "firestore/lite"), t._delete();
}
var an = class {
  constructor(t, e, n) {
    this.converter = e, this._key = n, this.type = "document", this.firestore = t;
  }
  get _path() {
    return this._key.path;
  }
  get id() {
    return this._key.path.lastSegment();
  }
  get path() {
    return this._key.path.canonicalString();
  }
  get parent() {
    return new ln(this.firestore, this.converter, this._key.path.popLast());
  }
  withConverter(t) {
    return new an(this.firestore, t, this._key);
  }
};
var hn = class {
  constructor(t, e, n) {
    this.converter = e, this._query = n, this.type = "query", this.firestore = t;
  }
  withConverter(t) {
    return new hn(this.firestore, t, this._query);
  }
};
var ln = class extends hn {
  constructor(t, e, n) {
    super(t, e, new oe(n)), this._path = n, this.type = "collection";
  }
  get id() {
    return this._query.path.lastSegment();
  }
  get path() {
    return this._query.path.canonicalString();
  }
  get parent() {
    const t = this._path.popLast();
    return t.isEmpty() ? null : new an(this.firestore, null, new et(t));
  }
  withConverter(t) {
    return new ln(this.firestore, t, this._path);
  }
};
function fn(t, e, ...n) {
  if (t = getModularInstance(t), nt("collection", "path", e), t instanceof rn) {
    const r = X.fromString(e, ...n);
    return st(r), new ln(t, null, r);
  }
  {
    if (!(t instanceof an || t instanceof ln))
      throw new U(A, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = t._path.child(X.fromString(e, ...n));
    return st(r), new ln(t.firestore, null, r);
  }
}
function dn(t, e) {
  if (t = ot(t, rn), nt("collectionGroup", "collection id", e), e.indexOf("/") >= 0)
    throw new U(A, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
  return new hn(t, null, function(t2) {
    return new oe(X.emptyPath(), t2);
  }(e));
}
function wn(t, e, ...n) {
  if (t = getModularInstance(t), arguments.length === 1 && (e = pt.R()), nt("doc", "path", e), t instanceof rn) {
    const r = X.fromString(e, ...n);
    return rt(r), new an(t, null, new et(r));
  }
  {
    if (!(t instanceof an || t instanceof ln))
      throw new U(A, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    const r = t._path.child(X.fromString(e, ...n));
    return rt(r), new an(t.firestore, t instanceof ln ? t.converter : null, new et(r));
  }
}
function mn(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof an || t instanceof ln) && (e instanceof an || e instanceof ln) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);
}
function pn(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), t instanceof hn && e instanceof hn && (t.firestore === e.firestore && de(t._query, e._query) && t.converter === e.converter);
}
var yn = class {
  constructor(...t) {
    for (let e = 0; e < t.length; ++e)
      if (t[e].length === 0)
        throw new U(A, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    this._internalPath = new tt(t);
  }
  isEqual(t) {
    return this._internalPath.isEqual(t._internalPath);
  }
};
function _n() {
  return new yn("__name__");
}
var gn = class {
  constructor(t) {
    this._byteString = t;
  }
  static fromBase64String(t) {
    try {
      return new gn(It.fromBase64String(t));
    } catch (t2) {
      throw new U(A, "Failed to construct data from Base64 string: " + t2);
    }
  }
  static fromUint8Array(t) {
    return new gn(It.fromUint8Array(t));
  }
  toBase64() {
    return this._byteString.toBase64();
  }
  toUint8Array() {
    return this._byteString.toUint8Array();
  }
  toString() {
    return "Bytes(base64: " + this.toBase64() + ")";
  }
  isEqual(t) {
    return this._byteString.isEqual(t._byteString);
  }
};
var vn = class {
  constructor(t) {
    this._methodName = t;
  }
};
var bn = class {
  constructor(t, e) {
    if (!isFinite(t) || t < -90 || t > 90)
      throw new U(A, "Latitude must be a number between -90 and 90, but was: " + t);
    if (!isFinite(e) || e < -180 || e > 180)
      throw new U(A, "Longitude must be a number between -180 and 180, but was: " + e);
    this._lat = t, this._long = e;
  }
  get latitude() {
    return this._lat;
  }
  get longitude() {
    return this._long;
  }
  isEqual(t) {
    return this._lat === t._lat && this._long === t._long;
  }
  toJSON() {
    return {
      latitude: this._lat,
      longitude: this._long
    };
  }
  _compareTo(t) {
    return yt(this._lat, t._lat) || yt(this._long, t._long);
  }
};
var En = /^__.*__$/;
var Tn = class {
  constructor(t, e, n) {
    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }
  toMutation(t, e) {
    return this.fieldMask !== null ? new Ie(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Te(t, this.data, e, this.fieldTransforms);
  }
};
var In = class {
  constructor(t, e, n) {
    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }
  toMutation(t, e) {
    return new Ie(t, this.data, this.fieldMask, e, this.fieldTransforms);
  }
};
function An(t) {
  switch (t) {
    case 0:
    case 2:
    case 1:
      return true;
    case 3:
    case 4:
      return false;
    default:
      throw g();
  }
}
var Rn = class {
  constructor(t, e, n, r, s, i) {
    this.settings = t, this.databaseId = e, this.q = n, this.ignoreUndefinedProperties = r, s === void 0 && this.Z(), this.fieldTransforms = s || [], this.fieldMask = i || [];
  }
  get path() {
    return this.settings.path;
  }
  get tt() {
    return this.settings.tt;
  }
  et(t) {
    return new Rn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.q, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
  }
  nt(t) {
    var e;
    const n = (e = this.path) === null || e === void 0 ? void 0 : e.child(t), r = this.et({
      path: n,
      rt: false
    });
    return r.st(t), r;
  }
  it(t) {
    var e;
    const n = (e = this.path) === null || e === void 0 ? void 0 : e.child(t), r = this.et({
      path: n,
      rt: false
    });
    return r.Z(), r;
  }
  ot(t) {
    return this.et({
      path: void 0,
      rt: true
    });
  }
  ut(t) {
    return Qn(t, this.settings.methodName, this.settings.ct || false, this.path, this.settings.at);
  }
  contains(t) {
    return this.fieldMask.find((e) => t.isPrefixOf(e)) !== void 0 || this.fieldTransforms.find((e) => t.isPrefixOf(e.field)) !== void 0;
  }
  Z() {
    if (this.path)
      for (let t = 0; t < this.path.length; t++)
        this.st(this.path.get(t));
  }
  st(t) {
    if (t.length === 0)
      throw this.ut("Document fields must not be empty");
    if (An(this.tt) && En.test(t))
      throw this.ut('Document fields cannot begin and end with "__"');
  }
};
var Pn = class {
  constructor(t, e, n) {
    this.databaseId = t, this.ignoreUndefinedProperties = e, this.q = n || Ye(t);
  }
  ht(t, e, n, r = false) {
    return new Rn({
      tt: t,
      methodName: e,
      at: n,
      path: tt.emptyPath(),
      rt: false,
      ct: r
    }, this.databaseId, this.q, this.ignoreUndefinedProperties);
  }
};
function Vn(t) {
  const e = t._freezeSettings(), n = Ye(t._databaseId);
  return new Pn(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
function Dn(t, e, n, r, s, i = {}) {
  const o = t.ht(i.merge || i.mergeFields ? 2 : 0, e, n, s);
  Mn("Data must be an object, but it was:", o, r);
  const u = kn(r, o);
  let c, a;
  if (i.merge)
    c = new Tt(o.fieldMask), a = o.fieldTransforms;
  else if (i.mergeFields) {
    const t2 = [];
    for (const r2 of i.mergeFields) {
      const s2 = Bn(e, r2, n);
      if (!o.contains(s2))
        throw new U(A, `Field '${s2}' is specified in your field mask but missing from your input data.`);
      Wn(t2, s2) || t2.push(s2);
    }
    c = new Tt(t2), a = o.fieldTransforms.filter((t3) => c.covers(t3.field));
  } else
    c = null, a = o.fieldTransforms;
  return new Tn(new Bt(u), c, a);
}
var Nn = class extends vn {
  _toFieldTransform(t) {
    if (t.tt !== 2)
      throw t.tt === 1 ? t.ut(`${this._methodName}() can only appear at the top level of your update data`) : t.ut(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
    return t.fieldMask.push(t.path), null;
  }
  isEqual(t) {
    return t instanceof Nn;
  }
};
function $n(t, e, n) {
  return new Rn({
    tt: 3,
    at: e.settings.at,
    methodName: t._methodName,
    rt: n
  }, e.databaseId, e.q, e.ignoreUndefinedProperties);
}
var Sn = class extends vn {
  _toFieldTransform(t) {
    return new ve(t.path, new pe());
  }
  isEqual(t) {
    return t instanceof Sn;
  }
};
var Fn = class extends vn {
  constructor(t, e) {
    super(t), this.lt = e;
  }
  _toFieldTransform(t) {
    const e = $n(this, t, true), n = this.lt.map((t2) => Un(t2, e)), r = new ye(n);
    return new ve(t.path, r);
  }
  isEqual(t) {
    return this === t;
  }
};
var xn = class extends vn {
  constructor(t, e) {
    super(t), this.lt = e;
  }
  _toFieldTransform(t) {
    const e = $n(this, t, true), n = this.lt.map((t2) => Un(t2, e)), r = new _e(n);
    return new ve(t.path, r);
  }
  isEqual(t) {
    return this === t;
  }
};
var qn = class extends vn {
  constructor(t, e) {
    super(t), this.ft = e;
  }
  _toFieldTransform(t) {
    const e = new ge(t.q, we(t.q, this.ft));
    return new ve(t.path, e);
  }
  isEqual(t) {
    return this === t;
  }
};
function On(t, e, n, r) {
  const s = t.ht(1, e, n);
  Mn("Data must be an object, but it was:", s, r);
  const i = [], o = Bt.empty();
  Et(r, (t2, r2) => {
    const u2 = Gn(e, t2, n);
    r2 = getModularInstance(r2);
    const c = s.it(u2);
    if (r2 instanceof Nn)
      i.push(u2);
    else {
      const t3 = Un(r2, c);
      t3 != null && (i.push(u2), o.set(u2, t3));
    }
  });
  const u = new Tt(i);
  return new In(o, u, s.fieldTransforms);
}
function Cn(t, e, n, r, s, i) {
  const o = t.ht(1, e, n), u = [Bn(e, r, n)], c = [s];
  if (i.length % 2 != 0)
    throw new U(A, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
  for (let t2 = 0; t2 < i.length; t2 += 2)
    u.push(Bn(e, i[t2])), c.push(i[t2 + 1]);
  const a = [], l2 = Bt.empty();
  for (let t2 = u.length - 1; t2 >= 0; --t2)
    if (!Wn(a, u[t2])) {
      const e2 = u[t2];
      let n2 = c[t2];
      n2 = getModularInstance(n2);
      const r2 = o.it(e2);
      if (n2 instanceof Nn)
        a.push(e2);
      else {
        const t3 = Un(n2, r2);
        t3 != null && (a.push(e2), l2.set(e2, t3));
      }
    }
  const f2 = new Tt(a);
  return new In(l2, f2, o.fieldTransforms);
}
function Ln(t, e, n, r = false) {
  return Un(n, t.ht(r ? 4 : 3, e));
}
function Un(t, e) {
  if (jn(t = getModularInstance(t)))
    return Mn("Unsupported field value:", e, t), kn(t, e);
  if (t instanceof vn)
    return function(t2, e2) {
      if (!An(e2.tt))
        throw e2.ut(`${t2._methodName}() can only be used with update() and set()`);
      if (!e2.path)
        throw e2.ut(`${t2._methodName}() is not currently supported inside arrays`);
      const n = t2._toFieldTransform(e2);
      n && e2.fieldTransforms.push(n);
    }(t, e), null;
  if (t === void 0 && e.ignoreUndefinedProperties)
    return null;
  if (e.path && e.fieldMask.push(e.path), t instanceof Array) {
    if (e.settings.rt && e.tt !== 4)
      throw e.ut("Nested arrays are not supported");
    return function(t2, e2) {
      const n = [];
      let r = 0;
      for (const s of t2) {
        let t3 = Un(s, e2.ot(r));
        t3 == null && (t3 = {
          nullValue: "NULL_VALUE"
        }), n.push(t3), r++;
      }
      return {
        arrayValue: {
          values: n
        }
      };
    }(t, e);
  }
  return function(t2, e2) {
    if ((t2 = getModularInstance(t2)) === null)
      return {
        nullValue: "NULL_VALUE"
      };
    if (typeof t2 == "number")
      return we(e2.q, t2);
    if (typeof t2 == "boolean")
      return {
        booleanValue: t2
      };
    if (typeof t2 == "string")
      return {
        stringValue: t2
      };
    if (t2 instanceof Date) {
      const n = gt.fromDate(t2);
      return {
        timestampValue: Ne(e2.q, n)
      };
    }
    if (t2 instanceof gt) {
      const n = new gt(t2.seconds, 1e3 * Math.floor(t2.nanoseconds / 1e3));
      return {
        timestampValue: Ne(e2.q, n)
      };
    }
    if (t2 instanceof bn)
      return {
        geoPointValue: {
          latitude: t2.latitude,
          longitude: t2.longitude
        }
      };
    if (t2 instanceof gn)
      return {
        bytesValue: $e(e2.q, t2._byteString)
      };
    if (t2 instanceof an) {
      const n = e2.databaseId, r = t2.firestore._databaseId;
      if (!r.isEqual(n))
        throw e2.ut(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);
      return {
        referenceValue: xe(t2.firestore._databaseId || e2.databaseId, t2._key.path)
      };
    }
    throw e2.ut(`Unsupported field value: ${it(t2)}`);
  }(t, e);
}
function kn(t, e) {
  const n = {};
  return !function(t2) {
    for (const e2 in t2)
      if (Object.prototype.hasOwnProperty.call(t2, e2))
        return false;
    return true;
  }(t) ? Et(t, (t2, r) => {
    const s = Un(r, e.nt(t2));
    s != null && (n[t2] = s);
  }) : e.path && e.path.length > 0 && e.fieldMask.push(e.path), {
    mapValue: {
      fields: n
    }
  };
}
function jn(t) {
  return !(typeof t != "object" || t === null || t instanceof Array || t instanceof Date || t instanceof gt || t instanceof bn || t instanceof gn || t instanceof an || t instanceof vn);
}
function Mn(t, e, n) {
  if (!jn(n) || !function(t2) {
    return typeof t2 == "object" && t2 !== null && (Object.getPrototypeOf(t2) === Object.prototype || Object.getPrototypeOf(t2) === null);
  }(n)) {
    const r = it(n);
    throw r === "an object" ? e.ut(t + " a custom object") : e.ut(t + " " + r);
  }
}
function Bn(t, e, n) {
  if ((e = getModularInstance(e)) instanceof yn)
    return e._internalPath;
  if (typeof e == "string")
    return Gn(t, e);
  throw Qn("Field path arguments must be of type string or ", t, false, void 0, n);
}
var zn = new RegExp("[~\\*/\\[\\]]");
function Gn(t, e, n) {
  if (e.search(zn) >= 0)
    throw Qn(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, false, void 0, n);
  try {
    return new yn(...e.split("."))._internalPath;
  } catch (r) {
    throw Qn(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, false, void 0, n);
  }
}
function Qn(t, e, n, r, s) {
  const i = r && !r.isEmpty(), o = s !== void 0;
  let u = `Function ${e}() called with invalid data`;
  n && (u += " (via `toFirestore()`)"), u += ". ";
  let c = "";
  return (i || o) && (c += " (found", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), c += ")"), new U(A, u + t + c);
}
function Wn(t, e) {
  return t.some((t2) => t2.isEqual(e));
}
var Yn = class {
  constructor(t, e, n, r, s) {
    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, this._converter = s;
  }
  get id() {
    return this._key.path.lastSegment();
  }
  get ref() {
    return new an(this._firestore, this._converter, this._key);
  }
  exists() {
    return this._document !== null;
  }
  data() {
    if (this._document) {
      if (this._converter) {
        const t = new Hn(this._firestore, this._userDataWriter, this._key, this._document, null);
        return this._converter.fromFirestore(t);
      }
      return this._userDataWriter.convertValue(this._document.data.value);
    }
  }
  get(t) {
    if (this._document) {
      const e = this._document.data.field(Xn("DocumentSnapshot.get", t));
      if (e !== null)
        return this._userDataWriter.convertValue(e);
    }
  }
};
var Hn = class extends Yn {
  data() {
    return super.data();
  }
};
var Kn = class {
  constructor(t, e) {
    this._docs = e, this.query = t;
  }
  get docs() {
    return [...this._docs];
  }
  get size() {
    return this.docs.length;
  }
  get empty() {
    return this.docs.length === 0;
  }
  forEach(t, e) {
    this._docs.forEach(t, e);
  }
};
function Jn(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), t instanceof Yn && e instanceof Yn ? t._firestore === e._firestore && t._key.isEqual(e._key) && (t._document === null ? e._document === null : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Kn && e instanceof Kn && (pn(t.query, e.query) && _t(t.docs, e.docs, Jn));
}
function Xn(t, e) {
  return typeof e == "string" ? Gn(t, e) : e instanceof yn ? e._internalPath : e._delegate._internalPath;
}
var Zn = class {
};
function tr(t, ...e) {
  for (const n of e)
    t = n._apply(t);
  return t;
}
var er = class extends Zn {
  constructor(t, e, n) {
    super(), this.dt = t, this.wt = e, this.yt = n, this.type = "where";
  }
  _apply(t) {
    const e = Vn(t.firestore), n = function(t2, e2, n2, r, s, i, o) {
      let u;
      if (s.isKeyField()) {
        if (i === "array-contains" || i === "array-contains-any")
          throw new U(A, `Invalid Query. You can't perform '${i}' queries on documentId().`);
        if (i === "in" || i === "not-in") {
          pr(o, i);
          const e3 = [];
          for (const n3 of o)
            e3.push(mr(r, t2, n3));
          u = {
            arrayValue: {
              values: e3
            }
          };
        } else
          u = mr(r, t2, o);
      } else
        i !== "in" && i !== "not-in" && i !== "array-contains-any" || pr(o, i), u = Ln(n2, e2, o, i === "in" || i === "not-in");
      const c = Wt.create(s, i, u);
      return function(t3, e3) {
        if (e3.N()) {
          const n4 = ae(t3);
          if (n4 !== null && !n4.isEqual(e3.field))
            throw new U(A, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n4.toString()}' and '${e3.field.toString()}'`);
          const r2 = ce(t3);
          r2 !== null && yr(t3, e3.field, r2);
        }
        const n3 = function(t4, e4) {
          for (const n4 of t4.filters)
            if (e4.indexOf(n4.op) >= 0)
              return n4.op;
          return null;
        }(t3, function(t4) {
          switch (t4) {
            case "!=":
              return ["!=", "not-in"];
            case "array-contains":
              return ["array-contains", "array-contains-any", "not-in"];
            case "in":
              return ["array-contains-any", "in", "not-in"];
            case "array-contains-any":
              return ["array-contains", "array-contains-any", "in", "not-in"];
            case "not-in":
              return ["array-contains", "array-contains-any", "in", "not-in", "!="];
            default:
              return [];
          }
        }(e3.op));
        if (n3 !== null)
          throw n3 === e3.op ? new U(A, `Invalid query. You cannot use more than one '${e3.op.toString()}' filter.`) : new U(A, `Invalid query. You cannot use '${e3.op.toString()}' filters with '${n3.toString()}' filters.`);
      }(t2, c), c;
    }(t._query, "where", e, t.firestore._databaseId, this.dt, this.wt, this.yt);
    return new hn(t.firestore, t.converter, function(t2, e2) {
      const n2 = t2.filters.concat([e2]);
      return new oe(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), n2, t2.limit, t2.limitType, t2.startAt, t2.endAt);
    }(t._query, n));
  }
};
function nr(t, e, n) {
  const r = e, s = Xn("where", t);
  return new er(s, r, n);
}
var rr = class extends Zn {
  constructor(t, e) {
    super(), this.dt = t, this._t = e, this.type = "orderBy";
  }
  _apply(t) {
    const e = function(t2, e2, n) {
      if (t2.startAt !== null)
        throw new U(A, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
      if (t2.endAt !== null)
        throw new U(A, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
      const r = new re(e2, n);
      return function(t3, e3) {
        if (ce(t3) === null) {
          const n2 = ae(t3);
          n2 !== null && yr(t3, n2, e3.field);
        }
      }(t2, r), r;
    }(t._query, this.dt, this._t);
    return new hn(t.firestore, t.converter, function(t2, e2) {
      const n = t2.explicitOrderBy.concat([e2]);
      return new oe(t2.path, t2.collectionGroup, n, t2.filters.slice(), t2.limit, t2.limitType, t2.startAt, t2.endAt);
    }(t._query, e));
  }
};
function sr(t, e = "asc") {
  const n = e, r = Xn("orderBy", t);
  return new rr(r, n);
}
var ir = class extends Zn {
  constructor(t, e, n) {
    super(), this.type = t, this.gt = e, this.vt = n;
  }
  _apply(t) {
    return new hn(t.firestore, t.converter, function(t2, e, n) {
      return new oe(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), t2.filters.slice(), e, n, t2.startAt, t2.endAt);
    }(t._query, this.gt, this.vt));
  }
};
function or(t) {
  return ut("limit", t), new ir("limit", t, "F");
}
function ur(t) {
  return ut("limitToLast", t), new ir("limitToLast", t, "L");
}
var cr = class extends Zn {
  constructor(t, e, n) {
    super(), this.type = t, this.bt = e, this.Et = n;
  }
  _apply(t) {
    const e = wr(t, this.type, this.bt, this.Et);
    return new hn(t.firestore, t.converter, function(t2, e2) {
      return new oe(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), t2.filters.slice(), t2.limit, t2.limitType, e2, t2.endAt);
    }(t._query, e));
  }
};
function ar(...t) {
  return new cr("startAt", t, true);
}
function hr(...t) {
  return new cr("startAfter", t, false);
}
var lr = class extends Zn {
  constructor(t, e, n) {
    super(), this.type = t, this.bt = e, this.Et = n;
  }
  _apply(t) {
    const e = wr(t, this.type, this.bt, this.Et);
    return new hn(t.firestore, t.converter, function(t2, e2) {
      return new oe(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), t2.filters.slice(), t2.limit, t2.limitType, t2.startAt, e2);
    }(t._query, e));
  }
};
function fr(...t) {
  return new lr("endBefore", t, false);
}
function dr(...t) {
  return new lr("endAt", t, true);
}
function wr(t, e, n, r) {
  if (n[0] = getModularInstance(n[0]), n[0] instanceof Yn)
    return function(t2, e2, n2, r2, s) {
      if (!r2)
        throw new U(P, `Can't use a DocumentSnapshot that doesn't exist for ${n2}().`);
      const i = [];
      for (const n3 of le(t2))
        if (n3.field.isKeyField())
          i.push(Ct(e2, r2.key));
        else {
          const t3 = r2.data.field(n3.field);
          if (Dt(t3))
            throw new U(A, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n3.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
          if (t3 === null) {
            const t4 = n3.field.canonicalString();
            throw new U(A, `Invalid query. You are trying to start or end a query using a document for which the field '${t4}' (used as the orderBy) does not exist.`);
          }
          i.push(t3);
        }
      return new ne(i, s);
    }(t._query, t.firestore._databaseId, e, n[0]._document, r);
  {
    const s = Vn(t.firestore);
    return function(t2, e2, n2, r2, s2, i) {
      const o = t2.explicitOrderBy;
      if (s2.length > o.length)
        throw new U(A, `Too many arguments provided to ${r2}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
      const u = [];
      for (let i2 = 0; i2 < s2.length; i2++) {
        const c = s2[i2];
        if (o[i2].field.isKeyField()) {
          if (typeof c != "string")
            throw new U(A, `Invalid query. Expected a string for document ID in ${r2}(), but got a ${typeof c}`);
          if (!he(t2) && c.indexOf("/") !== -1)
            throw new U(A, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r2}() must be a plain document ID, but '${c}' contains a slash.`);
          const n3 = t2.path.child(X.fromString(c));
          if (!et.isDocumentKey(n3))
            throw new U(A, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r2}() must result in a valid document path, but '${n3}' is not because it contains an odd number of segments.`);
          const s3 = new et(n3);
          u.push(Ct(e2, s3));
        } else {
          const t3 = Ln(n2, r2, c);
          u.push(t3);
        }
      }
      return new ne(u, i);
    }(t._query, t.firestore._databaseId, s, e, n, r);
  }
}
function mr(t, e, n) {
  if (typeof (n = getModularInstance(n)) == "string") {
    if (n === "")
      throw new U(A, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!he(e) && n.indexOf("/") !== -1)
      throw new U(A, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
    const r = e.path.child(X.fromString(n));
    if (!et.isDocumentKey(r))
      throw new U(A, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);
    return Ct(t, new et(r));
  }
  if (n instanceof an)
    return Ct(t, n._key);
  throw new U(A, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${it(n)}.`);
}
function pr(t, e) {
  if (!Array.isArray(t) || t.length === 0)
    throw new U(A, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
  if (t.length > 10)
    throw new U(A, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);
}
function yr(t, e, n) {
  if (!n.isEqual(e))
    throw new U(A, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
}
function _r(t, e, n) {
  let r;
  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;
}
var gr = class extends class {
  convertValue(t, e = "none") {
    switch (St(t)) {
      case 0:
        return null;
      case 1:
        return t.booleanValue;
      case 2:
        return Pt(t.integerValue || t.doubleValue);
      case 3:
        return this.convertTimestamp(t.timestampValue);
      case 4:
        return this.convertServerTimestamp(t, e);
      case 5:
        return t.stringValue;
      case 6:
        return this.convertBytes(Vt(t.bytesValue));
      case 7:
        return this.convertReference(t.referenceValue);
      case 8:
        return this.convertGeoPoint(t.geoPointValue);
      case 9:
        return this.convertArray(t.arrayValue, e);
      case 10:
        return this.convertObject(t.mapValue, e);
      default:
        throw g();
    }
  }
  convertObject(t, e) {
    const n = {};
    return Et(t.fields, (t2, r) => {
      n[t2] = this.convertValue(r, e);
    }), n;
  }
  convertGeoPoint(t) {
    return new bn(Pt(t.latitude), Pt(t.longitude));
  }
  convertArray(t, e) {
    return (t.values || []).map((t2) => this.convertValue(t2, e));
  }
  convertServerTimestamp(t, e) {
    switch (e) {
      case "previous":
        const n = Nt(t);
        return n == null ? null : this.convertValue(n, e);
      case "estimate":
        return this.convertTimestamp($t(t));
      default:
        return null;
    }
  }
  convertTimestamp(t) {
    const e = Rt(t);
    return new gt(e.seconds, e.nanos);
  }
  convertDocumentKey(t, e) {
    const n = X.fromString(t);
    v(We(n));
    const r = new K(n.get(1), n.get(3)), s = new et(n.popFirst(5));
    return r.isEqual(e) || p(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), s;
  }
} {
  constructor(t) {
    super(), this.firestore = t;
  }
  convertBytes(t) {
    return new gn(t);
  }
  convertReference(t) {
    const e = this.convertDocumentKey(t, this.firestore._databaseId);
    return new an(this.firestore, null, e);
  }
};
function vr(t) {
  const e = en((t = ot(t, an)).firestore), n = new gr(t.firestore);
  return Xe(e, [t._key]).then((e2) => {
    v(e2.length === 1);
    const r = e2[0];
    return new Yn(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);
  });
}
function br(t) {
  !function(t2) {
    if (ue(t2) && t2.explicitOrderBy.length === 0)
      throw new U(q, "limitToLast() queries require specifying at least one orderBy() clause");
  }((t = ot(t, hn))._query);
  const e = en(t.firestore), n = new gr(t.firestore);
  return Ze(e, t._query).then((e2) => {
    const r = e2.map((e3) => new Hn(t.firestore, n, e3.key, e3, t.converter));
    return ue(t._query) && r.reverse(), new Kn(t, r);
  });
}
function Er(t, e, n) {
  const r = _r((t = ot(t, an)).converter, e, n), s = Dn(Vn(t.firestore), "setDoc", t._key, r, t.converter !== null, n);
  return Je(en(t.firestore), [s.toMutation(t._key, be.none())]);
}
function Tr(t, e, n, ...r) {
  const s = Vn((t = ot(t, an)).firestore);
  let i;
  i = typeof (e = getModularInstance(e)) == "string" || e instanceof yn ? Cn(s, "updateDoc", t._key, e, n, r) : On(s, "updateDoc", t._key, e);
  return Je(en(t.firestore), [i.toMutation(t._key, be.exists(true))]);
}
function Ir(t) {
  return Je(en((t = ot(t, an)).firestore), [new Ae(t._key, be.none())]);
}
function Ar(t, e) {
  const n = wn(t = ot(t, ln)), r = _r(t.converter, e), s = Dn(Vn(t.firestore), "addDoc", n._key, r, n.converter !== null, {});
  return Je(en(t.firestore), [s.toMutation(n._key, be.exists(false))]).then(() => n);
}
function Rr() {
  return new Nn("deleteField");
}
function Pr() {
  return new Sn("serverTimestamp");
}
function Vr(...t) {
  return new Fn("arrayUnion", t);
}
function Dr(...t) {
  return new xn("arrayRemove", t);
}
function Nr(t) {
  return new qn("increment", t);
}
var $r = class {
  constructor(t, e) {
    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = false, this._dataReader = Vn(t);
  }
  set(t, e, n) {
    this._verifyNotCommitted();
    const r = Sr(t, this._firestore), s = _r(r.converter, e, n), i = Dn(this._dataReader, "WriteBatch.set", r._key, s, r.converter !== null, n);
    return this._mutations.push(i.toMutation(r._key, be.none())), this;
  }
  update(t, e, n, ...r) {
    this._verifyNotCommitted();
    const s = Sr(t, this._firestore);
    let i;
    return i = typeof (e = getModularInstance(e)) == "string" || e instanceof yn ? Cn(this._dataReader, "WriteBatch.update", s._key, e, n, r) : On(this._dataReader, "WriteBatch.update", s._key, e), this._mutations.push(i.toMutation(s._key, be.exists(true))), this;
  }
  delete(t) {
    this._verifyNotCommitted();
    const e = Sr(t, this._firestore);
    return this._mutations = this._mutations.concat(new Ae(e._key, be.none())), this;
  }
  commit() {
    return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
  }
  _verifyNotCommitted() {
    if (this._committed)
      throw new U(S, "A write batch can no longer be used after commit() has been called.");
  }
};
function Sr(t, e) {
  if ((t = getModularInstance(t)).firestore !== e)
    throw new U(A, "Provided document reference is from a different Firestore instance.");
  return t;
}
function Fr(t) {
  const e = en(t = ot(t, rn));
  return new $r(t, (t2) => Je(e, t2));
}
var xr = class {
  constructor(t) {
    this.datastore = t, this.readVersions = /* @__PURE__ */ new Map(), this.mutations = [], this.committed = false, this.lastWriteError = null, this.writtenDocs = /* @__PURE__ */ new Set();
  }
  async lookup(t) {
    if (this.ensureCommitNotCalled(), this.mutations.length > 0)
      throw new U(A, "Firestore transactions require all reads to be executed before all writes.");
    const e = await Xe(this.datastore, t);
    return e.forEach((t2) => this.recordVersion(t2)), e;
  }
  set(t, e) {
    this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
  }
  update(t, e) {
    try {
      this.write(e.toMutation(t, this.preconditionForUpdate(t)));
    } catch (t2) {
      this.lastWriteError = t2;
    }
    this.writtenDocs.add(t.toString());
  }
  delete(t) {
    this.write(new Ae(t, this.precondition(t))), this.writtenDocs.add(t.toString());
  }
  async commit() {
    if (this.ensureCommitNotCalled(), this.lastWriteError)
      throw this.lastWriteError;
    const t = this.readVersions;
    this.mutations.forEach((e) => {
      t.delete(e.key.toString());
    }), t.forEach((t2, e) => {
      const n = et.fromPath(e);
      this.mutations.push(new Re(n, this.precondition(n)));
    }), await Je(this.datastore, this.mutations), this.committed = true;
  }
  recordVersion(t) {
    let e;
    if (t.isFoundDocument())
      e = t.version;
    else {
      if (!t.isNoDocument())
        throw g();
      e = vt.min();
    }
    const n = this.readVersions.get(t.key.toString());
    if (n) {
      if (!e.isEqual(n))
        throw new U(F, "Document version changed between two reads.");
    } else
      this.readVersions.set(t.key.toString(), e);
  }
  precondition(t) {
    const e = this.readVersions.get(t.toString());
    return !this.writtenDocs.has(t.toString()) && e ? be.updateTime(e) : be.none();
  }
  preconditionForUpdate(t) {
    const e = this.readVersions.get(t.toString());
    if (!this.writtenDocs.has(t.toString()) && e) {
      if (e.isEqual(vt.min()))
        throw new U(A, "Can't update a document that doesn't exist.");
      return be.updateTime(e);
    }
    return be.exists(true);
  }
  write(t) {
    this.ensureCommitNotCalled(), this.mutations.push(t);
  }
  ensureCommitNotCalled() {
  }
};
var qr = class {
  constructor(t, e, n, r) {
    this.asyncQueue = t, this.datastore = e, this.updateFunction = n, this.deferred = r, this.Tt = 5, this.It = new He(this.asyncQueue, "transaction_retry");
  }
  run() {
    this.Tt -= 1, this.At();
  }
  At() {
    this.It.W(async () => {
      const t = new xr(this.datastore), e = this.Rt(t);
      e && e.then((e2) => {
        this.asyncQueue.enqueueAndForget(() => t.commit().then(() => {
          this.deferred.resolve(e2);
        }).catch((t2) => {
          this.Pt(t2);
        }));
      }).catch((t2) => {
        this.Pt(t2);
      });
    });
  }
  Rt(t) {
    try {
      const e = this.updateFunction(t);
      return !ct(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
    } catch (t2) {
      return this.deferred.reject(t2), null;
    }
  }
  Pt(t) {
    this.Tt > 0 && this.Vt(t) ? (this.Tt -= 1, this.asyncQueue.enqueueAndForget(() => (this.At(), Promise.resolve()))) : this.deferred.reject(t);
  }
  Vt(t) {
    if (t.name === "FirebaseError") {
      const e = t.code;
      return e === "aborted" || e === "failed-precondition" || !function(t2) {
        switch (t2) {
          default:
            return g();
          case T:
          case I:
          case R:
          case $:
          case O:
          case C:
          case N:
            return false;
          case A:
          case P:
          case V:
          case D:
          case S:
          case F:
          case x:
          case q:
          case L:
            return true;
        }
      }(e);
    }
    return false;
  }
};
function Or() {
  return typeof document != "undefined" ? document : null;
}
var Cr = class {
  constructor(t, e, n, r, s) {
    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, this.deferred = new k(), this.then = this.deferred.promise.then.bind(this.deferred.promise), this.deferred.promise.catch((t2) => {
    });
  }
  static createAndSchedule(t, e, n, r, s) {
    const i = Date.now() + n, o = new Cr(t, e, i, r, s);
    return o.start(n), o;
  }
  start(t) {
    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), t);
  }
  skipDelay() {
    return this.handleDelayElapsed();
  }
  cancel(t) {
    this.timerHandle !== null && (this.clearTimeout(), this.deferred.reject(new U(T, "Operation cancelled" + (t ? ": " + t : ""))));
  }
  handleDelayElapsed() {
    this.asyncQueue.enqueueAndForget(() => this.timerHandle !== null ? (this.clearTimeout(), this.op().then((t) => this.deferred.resolve(t))) : Promise.resolve());
  }
  clearTimeout() {
    this.timerHandle !== null && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
  }
};
var Lr = class {
  constructor() {
    this.Dt = Promise.resolve(), this.Nt = [], this.$t = false, this.St = [], this.Ft = null, this.xt = false, this.qt = false, this.Ot = [], this.It = new He(this, "async_queue_retry"), this.Ct = () => {
      const t2 = Or();
      t2 && m("AsyncQueue", "Visibility state changed to " + t2.visibilityState), this.It.H();
    };
    const t = Or();
    t && typeof t.addEventListener == "function" && t.addEventListener("visibilitychange", this.Ct);
  }
  get isShuttingDown() {
    return this.$t;
  }
  enqueueAndForget(t) {
    this.enqueue(t);
  }
  enqueueAndForgetEvenWhileRestricted(t) {
    this.Lt(), this.Ut(t);
  }
  enterRestrictedMode(t) {
    if (!this.$t) {
      this.$t = true, this.qt = t || false;
      const e = Or();
      e && typeof e.removeEventListener == "function" && e.removeEventListener("visibilitychange", this.Ct);
    }
  }
  enqueue(t) {
    if (this.Lt(), this.$t)
      return new Promise(() => {
      });
    const e = new k();
    return this.Ut(() => this.$t && this.qt ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)).then(() => e.promise);
  }
  enqueueRetryable(t) {
    this.enqueueAndForget(() => (this.Nt.push(t), this.kt()));
  }
  async kt() {
    if (this.Nt.length !== 0) {
      try {
        await this.Nt[0](), this.Nt.shift(), this.It.reset();
      } catch (t) {
        if (!function(t2) {
          return t2.name === "IndexedDbTransactionError";
        }(t))
          throw t;
        m("AsyncQueue", "Operation failed with retryable error: " + t);
      }
      this.Nt.length > 0 && this.It.W(() => this.kt());
    }
  }
  Ut(t) {
    const e = this.Dt.then(() => (this.xt = true, t().catch((t2) => {
      this.Ft = t2, this.xt = false;
      const e2 = function(t3) {
        let e3 = t3.message || "";
        t3.stack && (e3 = t3.stack.includes(t3.message) ? t3.stack : t3.message + "\n" + t3.stack);
        return e3;
      }(t2);
      throw p("INTERNAL UNHANDLED ERROR: ", e2), t2;
    }).then((t2) => (this.xt = false, t2))));
    return this.Dt = e, e;
  }
  enqueueAfterDelay(t, e, n) {
    this.Lt(), this.Ot.indexOf(t) > -1 && (e = 0);
    const r = Cr.createAndSchedule(this, t, e, n, (t2) => this.jt(t2));
    return this.St.push(r), r;
  }
  Lt() {
    this.Ft && g();
  }
  verifyOperationInProgress() {
  }
  async Mt() {
    let t;
    do {
      t = this.Dt, await t;
    } while (t !== this.Dt);
  }
  Bt(t) {
    for (const e of this.St)
      if (e.timerId === t)
        return true;
    return false;
  }
  zt(t) {
    return this.Mt().then(() => {
      this.St.sort((t2, e) => t2.targetTimeMs - e.targetTimeMs);
      for (const e of this.St)
        if (e.skipDelay(), t !== "all" && e.timerId === t)
          break;
      return this.Mt();
    });
  }
  Gt(t) {
    this.Ot.push(t);
  }
  jt(t) {
    const e = this.St.indexOf(t);
    this.St.splice(e, 1);
  }
};
var Ur = class {
  constructor(t, e) {
    this._firestore = t, this._transaction = e, this._dataReader = Vn(t);
  }
  get(t) {
    const e = Sr(t, this._firestore), n = new gr(this._firestore);
    return this._transaction.lookup([e._key]).then((t2) => {
      if (!t2 || t2.length !== 1)
        return g();
      const r = t2[0];
      if (r.isFoundDocument())
        return new Yn(this._firestore, n, r.key, r, e.converter);
      if (r.isNoDocument())
        return new Yn(this._firestore, n, e._key, null, e.converter);
      throw g();
    });
  }
  set(t, e, n) {
    const r = Sr(t, this._firestore), s = _r(r.converter, e, n), i = Dn(this._dataReader, "Transaction.set", r._key, s, r.converter !== null, n);
    return this._transaction.set(r._key, i), this;
  }
  update(t, e, n, ...r) {
    const s = Sr(t, this._firestore);
    let i;
    return i = typeof (e = getModularInstance(e)) == "string" || e instanceof yn ? Cn(this._dataReader, "Transaction.update", s._key, e, n, r) : On(this._dataReader, "Transaction.update", s._key, e), this._transaction.update(s._key, i), this;
  }
  delete(t) {
    const e = Sr(t, this._firestore);
    return this._transaction.delete(e._key), this;
  }
};
function kr(t, e) {
  const n = en(t = ot(t, rn)), r = new k();
  return new qr(new Lr(), n, (n2) => e(new Ur(t, n2)), r).run(), r.promise;
}
!function(t) {
  f = t;
}(`${SDK_VERSION}_lite`), _registerComponent(new Component("firestore/lite", (t, { options: e }) => {
  const n = t.getProvider("app").getImmediate(), r = new rn(n, new z(t.getProvider("auth-internal")), new Y(t.getProvider("app-check-internal")));
  return e && r._setSettings(e), r;
}, "PUBLIC")), registerVersion("firestore-lite", "3.4.7", ""), registerVersion("firestore-lite", "3.4.7", "esm2017");
export {
  gn as Bytes,
  ln as CollectionReference,
  an as DocumentReference,
  Yn as DocumentSnapshot,
  yn as FieldPath,
  vn as FieldValue,
  rn as Firestore,
  U as FirestoreError,
  bn as GeoPoint,
  hn as Query,
  Zn as QueryConstraint,
  Hn as QueryDocumentSnapshot,
  Kn as QuerySnapshot,
  gt as Timestamp,
  Ur as Transaction,
  $r as WriteBatch,
  Ar as addDoc,
  Dr as arrayRemove,
  Vr as arrayUnion,
  fn as collection,
  dn as collectionGroup,
  un as connectFirestoreEmulator,
  Ir as deleteDoc,
  Rr as deleteField,
  wn as doc,
  _n as documentId,
  dr as endAt,
  fr as endBefore,
  vr as getDoc,
  br as getDocs,
  on as getFirestore,
  Nr as increment,
  sn as initializeFirestore,
  or as limit,
  ur as limitToLast,
  sr as orderBy,
  tr as query,
  pn as queryEqual,
  mn as refEqual,
  kr as runTransaction,
  Pr as serverTimestamp,
  Er as setDoc,
  w as setLogLevel,
  Jn as snapshotEqual,
  hr as startAfter,
  ar as startAt,
  cn as terminate,
  Tr as updateDoc,
  nr as where,
  Fr as writeBatch
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=firebase_firestore_lite.js.map
